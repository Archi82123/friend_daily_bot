import datetime
import random
import pytz
from dotenv import load_dotenv
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)


load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


MESSAGES = [
    "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å –ª—é–±—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ üí™",
    "–¢—ã –¥–æ—Å—Ç–æ–∏–Ω —Å—á–∞—Å—Ç—å—è ‚ú®",
    "–¢—ã ‚Äî –ª—É—á—à–∏–π —á–µ–ª–æ–≤–µ–∫ –¥–ª—è —Å–∞–º–æ–≥–æ —Å–µ–±—è üíñ",
    "–°–µ–≥–æ–¥–Ω—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ üåû",
    "–¢—ã –Ω–µ –æ–¥–∏–Ω. –Ø —Ä—è–¥–æ–º ü§ó",
]

TIMEZONE, TIME_SELECTION = range(2)

TIMEZONE_OPTIONS = [
    ("UTC‚àí12:00", "Etc/GMT+12"),
    ("UTC‚àí11:00", "Etc/GMT+11"),
    ("UTC‚àí10:00 (–ì–∞–≤–∞–π–∏)", "Etc/GMT+10"),
    ("UTC‚àí09:00 (–ê–ª—è—Å–∫–∞)", "Etc/GMT+9"),
    ("UTC‚àí08:00 (–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è)", "Etc/GMT+8"),
    ("UTC‚àí07:00 (–î–µ–Ω–≤–µ—Ä)", "Etc/GMT+7"),
    ("UTC‚àí06:00 (–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞)", "Etc/GMT+6"),
    ("UTC‚àí05:00 (–ù—å—é-–ô–æ—Ä–∫, –¢–æ—Ä–æ–Ω—Ç–æ)", "Etc/GMT+5"),
    ("UTC‚àí04:00 (–ö–∞—Ä–∞–∫–∞—Å)", "Etc/GMT+4"),
    ("UTC‚àí03:00 (–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å)", "Etc/GMT+3"),
    ("UTC‚àí02:00", "Etc/GMT+2"),
    ("UTC‚àí01:00", "Etc/GMT+1"),
    ("UTC¬±00:00 (–õ–æ–Ω–¥–æ–Ω)", "Etc/GMT"),
    ("UTC+01:00 (–ë–µ—Ä–ª–∏–Ω, –ü–∞—Ä–∏–∂)", "Etc/GMT-1"),
    ("UTC+02:00 (–ö–∏–µ–≤, –ê—Ñ–∏–Ω—ã)", "Etc/GMT-2"),
    ("UTC+03:00 (–ú–æ—Å–∫–≤–∞, –°—Ç–∞–º–±—É–ª)", "Etc/GMT-3"),
    ("UTC+04:00 (–ë–∞–∫—É, –î—É–±–∞–π)", "Etc/GMT-4"),
    ("UTC+05:00 (–¢–∞—à–∫–µ–Ω—Ç, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)", "Etc/GMT-5"),
    ("UTC+06:00 (–ê–ª–º–∞—Ç—ã, –ë–∏—à–∫–µ–∫)", "Etc/GMT-6"),
    ("UTC+07:00 (–ë–∞–Ω–≥–∫–æ–∫, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫)", "Etc/GMT-7"),
    ("UTC+08:00 (–ü–µ–∫–∏–Ω, –ò—Ä–∫—É—Ç—Å–∫)", "Etc/GMT-8"),
    ("UTC+09:00 (–¢–æ–∫–∏–æ, –Ø–∫—É—Ç—Å–∫)", "Etc/GMT-9"),
    ("UTC+10:00 (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –°–∏–¥–Ω–µ–π)", "Etc/GMT-10"),
    ("UTC+11:00 (–°–∞—Ö–∞–ª–∏–Ω)", "Etc/GMT-11"),
    ("UTC+12:00 (–ö–∞–º—á–∞—Ç–∫–∞, –ú–∞–≥–∞–¥–∞–Ω)", "Etc/GMT-12"),
    ("UTC+13:00", "Etc/GMT-13"),
    ("UTC+14:00", "Etc/GMT-14"),
]


async def daily_message(context: CallbackContext):
    message = random.choice(MESSAGES)
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
    await context.bot.send_message(chat_id=context.job.chat_id, text=message)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for tz_label, tz_value in TIMEZONE_OPTIONS:
        keyboard.append([InlineKeyboardButton(text=tz_label, callback_data=tz_value)])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –¥—Ä—É–≥ ü§ó –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –î–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )
    return TIMEZONE


async def set_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_timezone = query.data

    if user_timezone not in pytz.all_timezones:
        await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return TIMEZONE

    context.user_data["timezone"] = user_timezone

    await query.edit_message_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:30)"
    )
    return TIME_SELECTION


async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()

    try:
        user_time = datetime.datetime.strptime(user_input, "%H:%M").time()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00).")
        return TIME_SELECTION

    chat_id = update.message.chat.id
    timezone_str = context.user_data.get("timezone")

    if not timezone_str:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return ConversationHandler.END

    tz = pytz.timezone(timezone_str)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    job_queue = context.application.job_queue
    jobs = job_queue.get_jobs_by_name(str(chat_id))
    for job in jobs:
        job.schedule_removal()

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    job_queue.run_daily(
        callback=daily_message,
        time=user_time,
        chat_id=chat_id,
        name=str(chat_id),
        tzinfo=tz
    )

    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {user_input} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {timezone_str}.")
    return ConversationHandler.END


app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        TIMEZONE: [CallbackQueryHandler(set_timezone)],
        TIME_SELECTION: [CommandHandler("start", start), MessageHandler(filters.TEXT & ~filters.COMMAND, set_time)],
    },
    fallbacks=[],
)

app.add_handler(conversation_handler)

app.run_polling()
