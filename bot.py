import datetime
import random
import pytz
from dotenv import load_dotenv
import os

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
    ConversationHandler,
)

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


MESSAGES = [
    "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å –ª—é–±—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ üí™",
    "–¢—ã –¥–æ—Å—Ç–æ–∏–Ω —Å—á–∞—Å—Ç—å—è ‚ú®",
    "–¢—ã ‚Äî –ª—É—á—à–∏–π —á–µ–ª–æ–≤–µ–∫ –¥–ª—è —Å–∞–º–æ–≥–æ —Å–µ–±—è üíñ",
    "–°–µ–≥–æ–¥–Ω—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ üåû",
    "–¢—ã –Ω–µ –æ–¥–∏–Ω. –Ø —Ä—è–¥–æ–º ü§ó",
]

TIMEZONE = range(1)

TIMEZONE_OPTIONS = [
    'Europe/Moscow',
    'Europe/Kaliningrad',
    'Asia/Yekaterinburg',
    'Asia/Novosibirsk',
    'Asia/Krasnoyarsk',
    'Asia/Irkutsk',
    'Asia/Yakutsk',
    'Asia/Vladivostok',
    'Asia/Magadan',
    'Asia/Sakhalin',
    'Asia/Kamchatka',
]

async def daily_message(context: CallbackContext):
    message = random.choice(MESSAGES)
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
    await context.bot.send_message(chat_id=context.job.chat_id, text=message)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[tz] for tz in TIMEZONE_OPTIONS]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –¥—Ä—É–≥ ü§ó –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00.\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )
    return TIMEZONE


async def set_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_timezone = update.message.text

    if user_timezone not in pytz.all_timezones:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return TIMEZONE

    chat_id = update.effective_chat.id
    tz = pytz.timezone(user_timezone)

    job_queue = context.application.job_queue
    jobs = job_queue.get_jobs_by_name(str(chat_id))
    for job in jobs:
        job.schedule_removal()

    scheduled_time = datetime.time(hour=9, minute=0, tzinfo=tz)
    job_queue.run_daily(
        callback=daily_message,
        time=scheduled_time,
        chat_id=chat_id,
        name=str(chat_id),
    )

    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {user_timezone}.")
    return ConversationHandler.END


app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        TIMEZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_timezone)],
    },
    fallbacks=[],
)

app.add_handler(conv_handler)

app.run_polling()
